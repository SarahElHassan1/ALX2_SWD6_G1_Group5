{
	"info": {
		"_postman_id": "3dcb0049-2ab7-4f5a-9ea4-6aab400a84f5",
		"name": "Simple Books API - Full Test Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43333428",
		"_collection_link": "https://g56666-6783.postman.co/workspace/API-testing~3d9efbb5-da6f-48d2-95e9-998768c98db6/collection/43333428-3dcb0049-2ab7-4f5a-9ea4-6aab400a84f5?action=share&source=collection_link&creator=43333428"
	},
	"item": [
		{
			"name": "1️⃣ End-to-End Scenario (Happy Path)",
			"item": [
				{
					"name": "Status",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Register & Get Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"pm.environment.set(\"accessToken\", jsonData.accessToken);",
									"console.log(\"[AccessToken]\", jsonData.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientName\": \"ZainabTest\",\n    \"clientEmail\": \"zainab{{Math.floor(Math.random()*10000)}}@test.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api-clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - All Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"[All Books]\", pm.response.json());",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Single Book (ID: 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"[Book Details]\", pm.response.json());",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/books/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"books",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Submit Order (Book ID: 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let res = pm.response.json();",
									"pm.environment.set(\"orderId\", res.orderId);",
									"console.log(\"[Order Created]\", res.orderId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bookId\": 1,\n    \"customerName\": \"Zainab\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - All Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"[Orders]\", pm.response.json());",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Specific Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"[Single Order]\", pm.response.json());",
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH - Update Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => pm.response.to.have.status(204));",
									"console.log(\"[Order Updated]\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerName\": \"Zainab Osama\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/orders/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE - Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => pm.response.to.have.status(204));",
									"console.log(\"[Order Deleted]\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2️⃣ Error Handling (Negative Tests)",
			"item": [
				{
					"name": "NEGATIVE - Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unauthorized (401)\", () => pm.response.to.have.status(401));",
									"console.log(\"[Unauthorized Access]\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer wrong-token"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEGATIVE - Submit Order Without Book ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bad Request (400)\", () => pm.response.to.have.status(400));",
									"console.log(\"[Missing Book ID]\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerName\": \"Zainab\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEGATIVE - Out Of Stock Book Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bad Request (400)\", () => pm.response.to.have.status(400));",
									"console.log(\"[Missing Book ID]\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customerName\": \"Zainab\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEGATIVE - Register with existing email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Conflict (409)\", () => pm.response.to.have.status(409));",
									"console.log(\"[Duplicate Email Registration Attempted]\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientName\": \"ZainabTest\",\n    \"clientEmail\": \"zainab_duplicate@test.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api-clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEGATIVE - Get Order Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not Found (404)\", () => pm.response.to.have.status(404));",
									"console.log(\"[Non-existent Order Requested]\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/invalid123",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"invalid123"
							]
						}
					},
					"response": []
				},
				{
					"name": "NEGATIVE - Delete Order with Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unauthorized (401)\", () => pm.response.to.have.status(401));",
									"console.log(\"[Delete with Invalid Token]\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer fake-token"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/orders/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://simple-books-api.glitch.me"
		},
		{
			"key": "userEmail",
			"value": ""
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		}
	]
}